R --version
--version
install.packages("caTools")
install.packages("bitops")
install.packages("caTools", dependencies = FALSE)
q()
install.packages("caTools", dependencies = FALSE)
# =============================================================================
# --------------------Importando dataset--------------------
# =============================================================================
# Estructura de los datos:tipos de empleados y el nivel
# de cada tipo de empleado y el salario correspondiente.
# Objetivo: asignar un salario correspondientes a un nivel y su posicion dada.
# Filas :10
# Columnas:
#           |Position|Level| (vars independiente)
#           |salary| (var_dependiente)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[,2:3]
setwd("~/Documentos/Proyectos_IA/MachineLearningAZ/3-Classification/6-Decision_Tree_Classification")
library(caTools)
library(e1071)
library(ElemStatLearn)
library(ggplot2)
library(rpart, lib.loc = "/usr/lib/R/library")
# Estructura de los datos: {explicar eldataset y el objetivo}.
# Filas :{numero de filas}
# Columnas:
#           |{col1}|{col2}|{...} (vars independiente)
#           |{columna de var indep.}| (var_dependiente)
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,3:5]
# =============================================================================
# --------------------Dividiendo dataset en conjuntos--------------------
# --------------------de entrenamiento y conjunto de testings-----------------
# =============================================================================
# install.packages("caTools") # solo se necesita ejecutar una vez
# library(caTools)
# configurando semilla aleatoria para la division de datos
set.seed(1)
# se elige el porcentaje de los datos para el training en %
split = sample.split(dataset$Purchased,SplitRatio = 0.25)
print(split)
# Dividiendo el conjunto , False para el test
training_set = subset(dataset,split == FALSE)
# Dividiendo el conjunto , True para el training
testing_set = subset(dataset,split == TRUE)
# =============================================================================
# --------------------Escalado de variables--------------------
# =============================================================================
# Scale() necesitaremos especificar las filas y columnas
# para especificar cuales son variables numericas.
# Ya que factor() no sobreescribe el dataset
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
# =============================================================================
# Ajustar el modelo de {  } al conjunto de entrenamiento
# =============================================================================
# install.packages("caTools") # solo se necesita ejecutar una vez
# library(caTools)
classifier =rpart(formula = Purchased ~ . ,
data = training_set)
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier,type = "class", newdata = testing_set[,-3])
print(prob_pred)
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier,type = "class", newdata = testing_set[,-3])
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier,type = "class", newdata = testing_set[,-3])
# =============================================================================
# Ajustar el modelo de {  } al conjunto de entrenamiento
# =============================================================================
# install.packages("rpart") # solo se necesita ejecutar una vez
# library(rpart)
classifier =rpart(formula = Purchased ~ . ,
data = training_set)
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier,type = "class", newdata = testing_set[,-3])
print(prob_pred)
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier,type = "class", newdata = testing_set[,-3])
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier, newdata = testing_set[,-3])
print(prob_pred)
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier, newdata = testing_set[,-3],type = "class")
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier, newdata = testing_set[,-3],type = "response")
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier, newdata = testing_set[,-3],type = "response")
print(prob_pred)
cm = table(testing_set[,3],y_pred)
print(cm)
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier, newdata = testing_set[,-3],type = "response")
print(prob_pred)
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier, newdata = testing_set[,-3],type = "response")
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier, newdata = testing_set[,-3],type = "class")
print(prob_pred)
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier, newdata = testing_set[,-3],type = "class")
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred <- predict(classifier, newdata = testing_set[,-3],type = "class")
# Estructura de los datos: {explicar eldataset y el objetivo}.
# Filas :{numero de filas}
# Columnas:
#           |{col1}|{col2}|{...} (vars independiente)
#           |{columna de var indep.}| (var_dependiente)
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,3:5]
# =============================================================================
# --------------------Dividiendo dataset en conjuntos--------------------
# --------------------de entrenamiento y conjunto de testings-----------------
# =============================================================================
# install.packages("caTools") # solo se necesita ejecutar una vez
# library(caTools)
# configurando semilla aleatoria para la division de datos
set.seed(1)
# se elige el porcentaje de los datos para el training en %
split = sample.split(dataset$Purchased,SplitRatio = 0.25)
# Dividiendo el conjunto , False para el test
training_set = subset(dataset,split == FALSE)
# Dividiendo el conjunto , True para el training
testing_set = subset(dataset,split == TRUE)
# =============================================================================
# --------------------Escalado de variables--------------------
# =============================================================================
# Scale() necesitaremos especificar las filas y columnas
# para especificar cuales son variables numericas.
# Ya que factor() no sobreescribe el dataset
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
classifier =rpart(formula = Purchased ~ . ,
data = training_set)
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred <- predict(classifier, newdata = testing_set[,-3],type = "class")
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred <- predict(classifier, newdata = testing_set[,-3],type = "class")
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier, newdata = testing_set[,-3],type = "class")
print(prob_pred)
cm = table(testing_set[,3],y_pred)
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier, newdata = testing_set[,-3],type = "class")
detach("package:rpart", unload = TRUE)
library(rpart, lib.loc = "/usr/lib/R/library")
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier, newdata = testing_set[,-3],type = "class")
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier, newdata = testing_set[,-3],type = "class")
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier, newdata = testing_set[,-3],type = "class")
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier, newdata = testing_set[,-3],type = "class")
print(prob_pred)
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier, newdata = testing_set[,-3],type = "class")
View(classifier)
View(dataset)
View(dataset)
classifier =rpart(formula = dataset$Purchased ~ . ,
data = training_set)
classifier =rpart(formula = Purchased ~ . ,
data = training_set)
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier, newdata = testing_set[,-3],type = "class")
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier, newdata = testing_set[,-3],type = "class")
# =============================================================================
# Prediccion de los resultados con el conjunto de testing
# =============================================================================
# obtenemos las probabilidades listadas
prob_pred = predict(classifier, newdata = testing_set[,-3],type = "class")
print(prob_pred)
