R --version
--version
install.packages("caTools")
install.packages("bitops")
install.packages("caTools", dependencies = FALSE)
q()
install.packages("caTools", dependencies = FALSE)
# =============================================================================
# --------------------Importando dataset--------------------
# =============================================================================
# Estructura de los datos:tipos de empleados y el nivel
# de cada tipo de empleado y el salario correspondiente.
# Objetivo: asignar un salario correspondientes a un nivel y su posicion dada.
# Filas :10
# Columnas:
#           |Position|Level| (vars independiente)
#           |salary| (var_dependiente)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[,2:3]
install.packages("ISLR2")
setwd("~/Documentos/Proyectos_IA/MachineLearningAZ/2-Regresion/1-Simple_Linear_Regression")
# =============================================================================
# --------------------Importando dataset--------------------
# =============================================================================
# Dataset de empleados que incluye los años de esperiencia de un empleado
# y de cuanto es su salario.
# Columnas: |YearExperience| (var independiente)
#           |Salary (var. dependiente)
dataset = read.csv('Salary_Data.csv')
View(dataset)
View(dataset)
library(caTools)
# configurando semilla aleatoria para la division de datos
set.seed(0)
# se elige el porcentaje de los datos para el training en %
# se selecciona la columna de la variable dependiente o a predecir
split = sample.split(dataset$Salary,SplitRatio = 2/3)
print(split)
# Dividiendo el conjunto , True para el training
training_set = subset(dataset,split == TRUE)
# Dividiendo el conjunto , False para el test
testing_set = subset(dataset,split == FALSE)
regressor=lm(formula=Salary ~ YearsExperience,data=training_set)
View(training_set)
View(training_set)
regressor=lm(formula=Salary ~ YearsExperience, data=training_set)
summary(regressor)
y_pred=predict(regressor,newdata=testing_set)
print(y_pred)
View(training_set)
View(training_set)
View(testing_set)
View(testing_set)
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=training_set$YearsExperience,y=training_set$Salary),
colour="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=training_set$YearsExperience,y=predict(regressor,newdata=training_set)),
colour="blue")+
ggtitle("Sueldo vs Años de experiencia(Entrenamiento)")+
xlab("Sueldo ($)")+
ylab("Anos de experiencia")
library(ggplot2)
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=training_set$YearsExperience,y=training_set$Salary),
colour="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=training_set$YearsExperience,y=predict(regressor,newdata=training_set)),
colour="blue")+
ggtitle("Sueldo vs Años de experiencia(Entrenamiento)")+
xlab("Sueldo ($)")+
ylab("Anos de experiencia")
ggplot()+
# Dobujando los puntos de testing
geom_point(aes(x=testing_set$YearsExperience,y=testing_set$Salary),
colour="red")+
# Dobujando la linea de la prediccion, en base al testing
geom_line(aes(x=testing_set$YearsExperience,y=y_pred),
colour="blue")+
ggtitle("Sueldo vs Años de experiencia(testing)")+
xlab("Sueldo ($)")+
ylab("Anos de experiencia")
set.seed(5)
# se elige el porcentaje de los datos para el training en %
# se selecciona la columna de la variable dependiente o a predecir
split = sample.split(dataset$Salary,SplitRatio = 2/3)
print(split)
# Dividiendo el conjunto , True para el training
training_set = subset(dataset,split == TRUE)
# Dividiendo el conjunto , False para el test
testing_set = subset(dataset,split == FALSE)
# =============================================================================
# --------------------Crear modelo de Regresion Lineal--------------------
# --------------------Simple con el conjunto de entrenamiento--------------------
# =============================================================================
regressor=lm(formula=Salary ~ YearsExperience, data=training_set)
summary(regressor)
# =============================================================================
# --------------------Predecir el conjunto de test--------------------
# =============================================================================
y_pred=predict(regressor,newdata=testing_set)
print(y_pred)
# =============================================================================
# ---------------Visualizar los resultados de entrenamiento--------------------
# =============================================================================
# Para mostrar la grafica de datos de entrenamiento y la recta del modelo lineal
# Agregando componentes a mostrar
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=training_set$YearsExperience,y=training_set$Salary),
colour="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=training_set$YearsExperience,y=predict(regressor,newdata=training_set)),
colour="blue")+
ggtitle("Sueldo vs Años de experiencia(Entrenamiento)")+
xlab("Sueldo ($)")+
ylab("Anos de experiencia")
# =============================================================================
# --------------------Visualizar los resultados de test--------------------
# =============================================================================
# Para mostrar la grafica de datos de testing y la recta del modelo lineal
# Agregando componentes a mostrar
ggplot()+
# Dobujando los puntos de testing
geom_point(aes(x=testing_set$YearsExperience,y=testing_set$Salary),
colour="red")+
# Dobujando la linea de la prediccion, en base al testing
geom_line(aes(x=testing_set$YearsExperience,y=y_pred),
colour="blue")+
ggtitle("Sueldo vs Años de experiencia(testing)")+
xlab("Sueldo ($)")+
ylab("Anos de experiencia")
