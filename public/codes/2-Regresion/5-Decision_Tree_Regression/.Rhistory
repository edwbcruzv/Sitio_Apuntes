R --version
--version
install.packages("caTools")
install.packages("bitops")
install.packages("caTools", dependencies = FALSE)
q()
install.packages("caTools", dependencies = FALSE)
# =============================================================================
# --------------------Importando dataset--------------------
# =============================================================================
# Estructura de los datos:tipos de empleados y el nivel
# de cada tipo de empleado y el salario correspondiente.
# Objetivo: asignar un salario correspondientes a un nivel y su posicion dada.
# Filas :10
# Columnas:
#           |Position|Level| (vars independiente)
#           |salary| (var_dependiente)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[,2:3]
install.packages("ISLR2")
setwd("~/Documentos/Proyectos_IA/MachineLearningAZ/2-Regresion/3-Polinomial_Regression")
dataset = read.csv('Position_Salaries.csv')
dataset=dataset[,2:3]
dataset = read.csv('Position_Salaries.csv')
View(dataset)
View(dataset)
dataset=dataset[,2:3]
View(dataset)
View(dataset)
linear_regressor=lm(formula=Salary ~ .,data=dataset)
summary(linear_regressor)
# =============================================================================
# Ajustar la regresion polinomica con el dataset
# =============================================================================
dataset$Level2=dataset$Level^2 # agregando esto se modifica el valor a polinomica
poly_regressor=lm(formula=Salary ~ .,data=dataset)
summary(poly_regressor)
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(linear_regressor,newdata=dataset)),
color="blue")+
ggtitle("Prediccion lineal del sueldo en funcion del nivel del empleado ")+
xlab("Nivel empleado")+
ylab("Sueldo en $")
# Agregando componentes a mostrar
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(poly_regressor,newdata=dataset)),
color="blue")+
ggtitle("Prediccion lineal polinomial del sueldo en funcion del nivel del empleado ")+
xlab("Nivel empleado")+
ylab("Sueldo en $")
library(ggplot2)
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(linear_regressor,newdata=dataset)),
color="blue")+
ggtitle("Prediccion lineal del sueldo en funcion del nivel del empleado ")+
xlab("Nivel empleado")+
ylab("Sueldo en $")
# =============================================================================
# Visualizacion de los resultado: Modelo Polinomico
# =============================================================================
# Para mostrar la grafica de datos de entrenamiento y la recta del modelo polinomial
# Agregando componentes a mostrar
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(poly_regressor,newdata=dataset)),
color="blue")+
ggtitle("Prediccion lineal polinomial del sueldo en funcion del nivel del empleado ")+
xlab("Nivel empleado")+
ylab("Sueldo en $")
# =============================================================================
# Ajustar la regresion polinomica con el dataset
# =============================================================================
dataset$Level2=dataset$Level^2 # agregando esto se modifica el valor a polinomica
dataset$Level3=dataset$Level^3
poly_regressor=lm(formula=Salary ~ .,data=dataset)
summary(poly_regressor)
# Agregando componentes a mostrar
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(poly_regressor,newdata=dataset)),
color="blue")+
ggtitle("Prediccion lineal polinomial del sueldo en funcion del nivel del empleado ")+
xlab("Nivel empleado")+
ylab("Sueldo en $")
dataset$Level3=dataset$Level^3
dataset$Level4=dataset$Level^4
poly_regressor=lm(formula=Salary ~ .,data=dataset)
summary(poly_regressor)
# Agregando componentes a mostrar
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(poly_regressor,newdata=dataset)),
color="blue")+
ggtitle("Prediccion lineal polinomial del sueldo en funcion del nivel del empleado ")+
xlab("Nivel empleado")+
ylab("Sueldo en $")
dataset$Level4=dataset$Level^5
poly_regressor=lm(formula=Salary ~ .,data=dataset)
summary(poly_regressor)
# Agregando componentes a mostrar
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(poly_regressor,newdata=dataset)),
color="blue")+
ggtitle("Prediccion lineal polinomial del sueldo en funcion del nivel del empleado ")+
xlab("Nivel empleado")+
ylab("Sueldo en $")
dataset$Level2=dataset$Level^2 # agregando esto se modifica el valor a polinomica
dataset$Level3=dataset$Level^3
dataset$Level4=dataset$Level^4
dataset$Level4=dataset$Level^5
dataset$Level5=dataset$Level^5
poly_regressor=lm(formula=Salary ~ .,data=dataset)
summary(poly_regressor)
# Agregando componentes a mostrar
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(poly_regressor,newdata=dataset)),
color="blue")+
ggtitle("Prediccion lineal polinomial del sueldo en funcion del nivel del empleado ")+
xlab("Nivel empleado")+
ylab("Sueldo en $")
y_pred_linear=predict(linear_regressor,newdata=data.frame(Level=6.5))
print(y_pred_linear)
y_pred_poly=predict(poly_regressor,newdata=data.frame(Level=6.5,
Level2=6.5^2,
Level3=6.5^3,
Level4=6.5^4))
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[,2:3]
svr_regressor=svm(x = dataset$Level,y = dataset$Salary,kernel='radial')
library(e1071)
svr_regressor=svm(x = dataset$Level,y = dataset$Salary,kernel='radial')
summary(svr_regressor)
# grid=seq(min(dataset$Level),max(dataset$Level),0.1)
# Agregando componentes a mostrar
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(svr_regressor,newdata=dataset$Level)),
color="blue")+
ggtitle("Prediccion SVR  ")+
xlab("Nivel del empleado")+
ylab("Sueldo en $")
# =============================================================================
# Prediccion de nuestros modelos (Resultados)
# =============================================================================
y_pred_type=predict(svr_regressor,newdata=6.5)
print(y_pred_type)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[,2:3]
setwd("~/Documentos/Proyectos_IA/MachineLearningAZ/2-Regresion/5-Decision_Tree_Regression")
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[,2:3]
library(rpart, lib.loc = "/usr/lib/R/library")
tree_regressor=rpart(formula = dataset$Salary ~ dataset$Level,
data=dataset,
control = rpart.control(minsplit = 1))
summary(tree_regressor)
# Visualizacion de los resultado: Modelo {type}
# =============================================================================
# Para mostrar la grafica de datos de entrenamiento
x_grid=seq(min(dataset$Level),max(dataset$Level),0.01)
# Agregando componentes a mostrar
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(tree_regressor,newdata=dataset)),
# geom_line(aes(x=x_grid,
#               y=predict(tree_regressor,
#                         newdata=data.frame(Level=x_grid))), # ver porque no funciona esta parte----
color="blue")+
ggtitle("Prediccion usando regresion con arboles de decision   ")+
xlab("labelx")+
ylab("labely")
# =============================================================================
# Prediccion de nuestros modelos (Resultados)
# =============================================================================
y_pred_tree=predict(tree_regressor,newdata=data.frame(Level=6.5))
print(y_pred_tree)
# =============================================================================
# Random Forest Regression
# =============================================================================
# =============================================================================
# --------------------Importando dataset--------------------
# =============================================================================
# Estructura de los datos:tipos de empleados y el nivel
# de cada tipo de empleado y el salario correspondiente.
# Objetivo: asignar un salario correspondientes a un nivel y su posicion dada.
# Filas :10
# Columnas:
#           |Position|Level| (vars independiente)
#           |salary| (var_dependiente)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[,2:3]
# No se hace ninguna distincion entre variables independientes
# y variables dependientes en R
# =============================================================================
# Ajustar la regresion random forest con el dataset
# =============================================================================
# crear nuestra variable de regresion aqui
# library(randomForest)
set.seed(1)
rf_regressor=randomForest(x=dataset[1],y=dataset$Salary,
ntree=100)
library(randomForest)
# =============================================================================
# Random Forest Regression
# =============================================================================
# =============================================================================
# --------------------Importando dataset--------------------
# =============================================================================
# Estructura de los datos:tipos de empleados y el nivel
# de cada tipo de empleado y el salario correspondiente.
# Objetivo: asignar un salario correspondientes a un nivel y su posicion dada.
# Filas :10
# Columnas:
#           |Position|Level| (vars independiente)
#           |salary| (var_dependiente)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[,2:3]
# No se hace ninguna distincion entre variables independientes
# y variables dependientes en R
# =============================================================================
# Ajustar la regresion random forest con el dataset
# =============================================================================
# crear nuestra variable de regresion aqui
# library(randomForest)
set.seed(1)
rf_regressor=randomForest(x=dataset[1],y=dataset$Salary,
ntree=100)
summary(rf_regressor)
# =============================================================================
# Visualizacion de los resultado: Modelo random forest
# =============================================================================
# Para mostrar la grafica de datos de entrenamiento
x_grid=seq(min(dataset$Level),max(dataset$Level),0.01)
# Agregando componentes a mostrar
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
# geom_line(aes(x=dataset$Level,y=predict(rf_regressor,newdata=dataset)),
geom_line(aes(x=x_grid,
y=predict(rf_regressor,
newdata=data.frame(Level=x_grid))),
color="blue")+
ggtitle("Prediccion usando regresion con arboles aleatorios de decision   ")+
xlab("labelx")+
ylab("labely")
# =============================================================================
# Prediccion de nuestros modelos (Resultados)
# =============================================================================
y_pred_tree=predict(rf_regressor,newdata=data.frame(Level=6.5))
print(y_pred_tree)
# =============================================================================
# Random Forest Regression
# =============================================================================
# =============================================================================
# --------------------Importando dataset--------------------
# =============================================================================
# Estructura de los datos:tipos de empleados y el nivel
# de cada tipo de empleado y el salario correspondiente.
# Objetivo: asignar un salario correspondientes a un nivel y su posicion dada.
# Filas :10
# Columnas:
#           |Position|Level| (vars independiente)
#           |salary| (var_dependiente)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[,2:3]
# No se hace ninguna distincion entre variables independientes
# y variables dependientes en R
# =============================================================================
# Ajustar la regresion random forest con el dataset
# =============================================================================
# crear nuestra variable de regresion aqui
# library(randomForest)
set.seed(1)
rf_regressor=randomForest(x=dataset[1],y=dataset$Salary,
ntree=1000)
summary(rf_regressor)
# =============================================================================
# Visualizacion de los resultado: Modelo random forest
# =============================================================================
# Para mostrar la grafica de datos de entrenamiento
x_grid=seq(min(dataset$Level),max(dataset$Level),0.01)
# Agregando componentes a mostrar
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
# geom_line(aes(x=dataset$Level,y=predict(rf_regressor,newdata=dataset)),
geom_line(aes(x=x_grid,
y=predict(rf_regressor,
newdata=data.frame(Level=x_grid))),
color="blue")+
ggtitle("Prediccion usando regresion con arboles aleatorios de decision   ")+
xlab("labelx")+
ylab("labely")
# =============================================================================
# Prediccion de nuestros modelos (Resultados)
# =============================================================================
y_pred_tree=predict(rf_regressor,newdata=data.frame(Level=6.5))
print(y_pred_tree)
