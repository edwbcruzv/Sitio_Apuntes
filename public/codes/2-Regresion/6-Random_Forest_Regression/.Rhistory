R --version
--version
install.packages("caTools")
install.packages("bitops")
install.packages("caTools", dependencies = FALSE)
q()
install.packages("caTools", dependencies = FALSE)
setwd("~/Documentos/Proyectos_IA/MachineLearningAZ/2-Regresion/3-Polinomial_Regression")
# =============================================================================
# --------------------Importando dataset--------------------
# =============================================================================
# Estructura de los datos:tipos de empleados y el nivel
# de cada tipo de empleado y el salario correspondiente.
# Objetivo: asignar un salario correspondientes a un nivel y su posicion dada.
# Filas :10
# Columnas:
#           |Position|Level| (vars independiente)
#           |salary| (var_dependiente)
dataset = read.csv('Position_Salaries.csv')
dataset=dataset[,2:3]
# =============================================================================
# Ajustar la regresion lineal con el dataset
# =============================================================================
linear_regressor=lm(formula=Salary ~ .,data=dataset)
summary(linear_regressor)
# =============================================================================
# Ajustar la regresion polinomica con el dataset
# =============================================================================
dataset$Level2=dataset$Level^2 # agregando esto se modifica el valor a polinomica
dataset$Level3=dataset$Level^3
dataset$Level4=dataset$Level^4
poly_regressor=lm(formula=Salary ~ .,data=dataset)
summary(poly_regressor)
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(linear_regressor,newdata=dataset)),
color="blue")+
ggtitle("Prediccion lineal del sueldo en funcion del nivel del empleado ")+
xlab("Nivel empleado")+
ylab("Sueldo en $")
install.packages("ggplot2", dependencies = FALSE)
install.packages("~/Descargas/ggplot2_3.4.3.tar.gz", repos = NULL, type = "source")
install.packages("cli", dependencies = FALSE)
install.packages("glue", dependencies = FALSE)
install.packages("gtable", dependencies = FALSE)
install.packages("ggplot2")
library(ggplot2)
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(linear_regressor,newdata=dataset)),
color="blue")+
ggtitle("Prediccion lineal del sueldo en funcion del nivel del empleado ")+
xlab("Nivel empleado")+
ylab("Sueldo en $")
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(poly_regressor,newdata=dataset)),
color="blue")+
ggtitle("Prediccion lineal polinomial del sueldo en funcion del nivel del empleado ")+
xlab("Nivel empleado")+
ylab("Sueldo en $")
setwd("~/Documentos/Proyectos_IA/MachineLearningAZ/2-Regresion/4-Support_Vector_Regression(SVR)")
# =============================================================================
# --------------------Importando dataset--------------------
# =============================================================================
# Estructura de los datos:tipos de empleados y el nivel
# de cada tipo de empleado y el salario correspondiente.
# Objetivo: asignar un salario correspondientes a un nivel y su posicion dada.
# Filas :10
# Columnas:
#           |Position|Level| (vars independiente)
#           |salary| (var_dependiente)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[,2:3]
# =============================================================================
# Ajustar la SVR con el dataset
# =============================================================================
# crear nuestra variable de regresion aqui
# library(e1071)
svr_regressor=svm(x = dataset$Level,y = dataset$Salary,kernel='radial')
# =============================================================================
# Ajustar la SVR con el dataset
# =============================================================================
# crear nuestra variable de regresion aqui
# library(e1071)
svr_regressor=svm(x = dataset$Level,y = dataset$Salary,kernel='radial')
detach("package:ggplot2", unload = TRUE)
library(e1071)
library(ggplot2)
# =============================================================================
# Ajustar la SVR con el dataset
# =============================================================================
# crear nuestra variable de regresion aqui
# library(e1071)
svr_regressor=svm(x = dataset$Level,y = dataset$Salary,kernel='radial')
summary(svr_regressor)
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(svr_regressor,newdata=dataset$Level)),
color="blue")+
ggtitle("Prediccion SVR  ")+
xlab("Nivel del empleado")+
ylab("Sueldo en $")
svr_regressor=svm(x = dataset$Level,y = dataset$Salary,kernel='lineal')
svr_regressor=svm(x = dataset$Level,y = dataset$Salary,kernel='linear')
summary(svr_regressor)
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(svr_regressor,newdata=dataset$Level)),
color="blue")+
ggtitle("Prediccion SVR  ")+
xlab("Nivel del empleado")+
ylab("Sueldo en $")
svr_regressor=svm(x = dataset$Level,y = dataset$Salary,kernel='sigmoid')
summary(svr_regressor)
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(svr_regressor,newdata=dataset$Level)),
color="blue")+
ggtitle("Prediccion SVR  ")+
xlab("Nivel del empleado")+
ylab("Sueldo en $")
svr_regressor=svm(x = dataset$Level,y = dataset$Salary,kernel='radial')
summary(svr_regressor)
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(svr_regressor,newdata=dataset$Level)),
color="blue")+
ggtitle("Prediccion SVR  ")+
xlab("Nivel del empleado")+
ylab("Sueldo en $")
setwd("~/Documentos/Proyectos_IA/MachineLearningAZ/2-Regresion/5-Decision_Tree_Regression")
#           |salary| (var_dependiente)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[,2:3]
library(rpart, lib.loc = "/usr/lib/R/library")
tree_regressor=rpart(formula = dataset$Salary ~ dataset$Level,
data=dataset,
control = rpart.control(minsplit = 1))
summary(tree_regressor)
tree_regressor=rpart(formula = dataset$Salary ~ dataset$Level,
data=dataset,
control = rpart.control(minsplit = 3))
summary(tree_regressor)
x_grid=seq(min(dataset$Level),max(dataset$Level),0.1)
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(tree_regressor,newdata=dataset)),
# geom_line(aes(x=x_grid,
#               y=predict(tree_regressor,
#                         newdata=data.frame(Level=x_grid))), # ver porque no funciona esta parte----
color="blue")+
ggtitle("Prediccion usando regresion con arboles de decision   ")+
xlab("labelx")+
ylab("labely")
View(dataset)
View(dataset)
tree_regressor=rpart(formula = dataset$Salary ~ dataset$Level,
data=dataset,
control = rpart.control(minsplit = 1))
summary(tree_regressor)
x_grid=seq(min(dataset$Level),max(dataset$Level),0.1)
# Agregando componentes a mostrar
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(tree_regressor,newdata=dataset)),
# geom_line(aes(x=x_grid,
#               y=predict(tree_regressor,
#                         newdata=data.frame(Level=x_grid))), # ver porque no funciona esta parte----
color="blue")+
ggtitle("Prediccion usando regresion con arboles de decision   ")+
xlab("labelx")+
ylab("labely")
x_grid=seq(min(dataset$Level),max(dataset$Level),1)
# Agregando componentes a mostrar
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(tree_regressor,newdata=dataset)),
# geom_line(aes(x=x_grid,
#               y=predict(tree_regressor,
#                         newdata=data.frame(Level=x_grid))), # ver porque no funciona esta parte----
color="blue")+
ggtitle("Prediccion usando regresion con arboles de decision   ")+
xlab("labelx")+
ylab("labely")
# library(rpart)
tree_regressor=rpart(formula = dataset$Salary ~ dataset$Level,
data=dataset,
control = rpart.control(minsplit = 1))
summary(tree_regressor)
x_grid=seq(min(dataset$Level),max(dataset$Level),1)
# Agregando componentes a mostrar
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(tree_regressor,newdata=dataset)),
# geom_line(aes(x=x_grid,
#               y=predict(tree_regressor,
#                         newdata=data.frame(Level=x_grid))), # ver porque no funciona esta parte----
color="blue")+
ggtitle("Prediccion usando regresion con arboles de decision   ")+
xlab("labelx")+
ylab("labely")
x_grid=seq(min(dataset$Level),max(dataset$Level),0.1)
# Agregando componentes a mostrar
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
geom_line(aes(x=dataset$Level,y=predict(tree_regressor,newdata=dataset)),
# geom_line(aes(x=x_grid,
#               y=predict(tree_regressor,
#                         newdata=data.frame(Level=x_grid))), # ver porque no funciona esta parte----
color="blue")+
ggtitle("Prediccion usando regresion con arboles de decision   ")+
xlab("labelx")+
ylab("labely")
y_pred_tree=predict(tree_regressor,newdata=data.frame(Level=6.5))
print(y_pred_tree)
install.packages("randomForest")
setwd("~/Documentos/Proyectos_IA/MachineLearningAZ/2-Regresion/6-Random_Forest_Regression")
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[,2:3]
library(randomForest)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[,2:3]
set.seed(1234)
rf_regressor=randomForest(x=dataset[1],y=dataset$Salary,
ntree=100)
summary(rf_regressor)
set.seed(1)
rf_regressor=randomForest(x=dataset[1],y=dataset$Salary,
ntree=100)
summary(rf_regressor)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[,2:3]
set.seed(1)
rf_regressor=randomForest(x=dataset[1],y=dataset$Salary,
ntree=100)
summary(rf_regressor)
x_grid=seq(min(dataset$Level),max(dataset$Level),0.01)
# Agregando componentes a mostrar
ggplot()+
# Dobujando los puntos de entrenamiento
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="red")+
# Dobujando la linea de la prediccion, en base al entrenamiento
# geom_line(aes(x=dataset$Level,y=predict(rf_regressor,newdata=dataset)),
geom_line(aes(x=x_grid,
y=predict(rf_regressor,
newdata=data.frame(Level=x_grid))),
color="blue")+
ggtitle("Prediccion usando regresion con arboles aleatorios de decision   ")+
xlab("labelx")+
ylab("labely")
y_pred_tree=predict(rf_regressor,newdata=data.frame(Level=6.5))
print(y_pred_tree)
